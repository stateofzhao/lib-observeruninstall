apply plugin: 'com.android.model.library'

model {

    android {
        compileSdkVersion = 24
        buildToolsVersion = "23.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel = 11
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
        }// end defaultConfig

        ndk {//只有moduleName 是必选的，其它都可以省略（如果不出错的话）
            file("src/main/jni/com_diagramsj_test_jniclass_ObserverUninstall.c")
            moduleName = "ObserverUninstall"//编译完后生成的.so文件的名称，注意需要与java中的 System.loadLibrary("ObserverUninstall")同名
            ldLibs.addAll(["m", "log", "z", "android"])//连接时使用到的库，对应Android.mk中的 LOCAL_LDLIBS

            //对应Android.mk中的 LOCAL_CFLAGS
            CFlags.add("-I${file("src/main/jni/com_diagramsj_test_jniclass_ObserverUninstall.c")}".toString())
            CFlags.add("-UNDEBUG")//关闭DEBUG模式
        }// end ndk

        //指定要生成哪个CPU平台的.so文件
        productFlavors {
            create("arm") {
                // You can customize the NDK configurations for each
                // productFlavors and buildTypes.
                ndk.abiFilters.add("armeabi")
            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("arm8") {
                ndk.abiFilters.add("arm64-v8a")
            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
            create("x86-64") {
                ndk.abiFilters.add("x86_64")
            }
            create("mips") {
                ndk.abiFilters.add("mips")
            }
            create("mips-64") {
                ndk.abiFilters.add("mips64")
            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")

        }// end productFlavors

        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file("proguard-rules.pro"))

                //正式版本禁用ndk调试
                ndk {
                    debuggable = false
                }
            }
        }// end buildTypes

    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:24.0.0'
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile 'com.android.support:design:24.0.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.tonicartos:stickygridheaders:1.0.1'
    compile 'com.tonicartos:superslim:0.4.13'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    compile "com.google.guava:guava:18.0"
}
repositories {
    flatDir {
        dirs 'libs'
    }
}

//注意这个是在model{}标签外面的
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        // 注意：不要把你的应用程序的依赖放在这里；它们属于单独的模块的build.gradle文件

        //这个是google的非实验性Gradle插件，可以和上面的实验性插件共存
        classpath 'com.android.tools.build:gradle:2.1.2'

        // 为了在Android Studio动态编译C文件，这里使用了google的实验性Gradle插件，
        // 注意build:gradle:2.1.2 必须对应这个 0.7.0-alpha4或者更高版本。
        // 2016/06/22 更新，由于 0.7.0-alpha4 在Android Studio 2.0及以上版本中有bug，
        // 会导致动态编译C文件时，无法获取jni.h等NDK库文件（虽然不影响编译和部署包），
        // 把0.7.0-alpha4更改为0.7.0-rc1就解决了。
        classpath 'com.android.tools.build:gradle-experimental:0.7.0-rc1'

        //Gradle版本不是指的上面两个 gradle插件版本，指的是编译依赖的Gradle版本，需要另外下载

        //实验性的Gradle插件的版本严格对应Gradle版本，下面是版本对照表：
        //=======================================================
        //    Plugin Version	Gradle Version
        //    0.1.0	                2.5
        //    0.2.0	                2.5
        //    0.3.0-alpha3	        2.6
        //    0.4.0	                2.8
        //    0.6.0-alpha1	        2.8
        //    0.6.0-alpha5	        2.10
        //    0.7.0-alpha1	        2.10
        //=======================================================
        //可以通过修改 [./gradle/wrapper/gradle-wrapper.properties] 文件来指定Gradle版本：
        //distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
        //修改此行的  "gradle-2.10-all.zip" 中的 "2.10" 来指定具体的Gradle版本。

        //实验性的Gradle插件 和 非实现性的Gradle插件 的DSL变化，区别参见下表：
        //                      实验性的Gradle插件                          非实验性的Gradle插件
        //-----------------------------------------------------------------------------
        //插件名：               com.android.model.application              com.android.application
        //                      如果想创建Android aar库，则使用
        //                      com.android.model.library
        //-----------------------------------------------------------------------------
        //当前Model的最外层块：   model{}                                     android{}
        //-----------------------------------------------------------------------------
        //赋值方式：             xxx=xxx                                     xxx xxx
        //                      如果还是写成xxx xxx这种赋值方式，会
        //                      报Gradle sync failed: Cause: org.gradle.
        //                      api.internal.ExtensibleDynamicObject
        //                      这个错误
        //-----------------------------------------------------------------------------
        //向集合中添加元素：      使用add()方法                                 使用=
        //-----------------------------------------------------------------------------
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

//google的实验性Gradle插件，介绍参见：
//http://tools.android.com/tech-docs/new-build-system/gradle-experimental#TOC-Introduction
//国内翻译的参见：
//http://my.oschina.net/wolfcs/blog/550677